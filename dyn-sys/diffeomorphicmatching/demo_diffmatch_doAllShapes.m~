%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Demo for testing Diffeomorphic Matching for DS learning algo (Perrin)    %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all; close all;
%All Lasa-shapes except multidemonstration examples
dataset_dir = '../../LASADataset/DataSet/';
allShapes = dir(dataset_dir);
allShapes(1:2) = [];
figName = 'LASADataset/';
suffix = '';
allOptions = {};
mkdir(figName);

%Options concerning th simulation
%Set eigenvalues here
%'EIG0' defines the linear system. EIG0(2,2) specifies the convergence rate
%in the orthogonal direction
maxStep = 1001;
optsSim = {'maxStep', num2str(maxStep), 'stepSizeFac',' 1', 'EIG0', '-diag([1,1.5])','offsetEnd', '[0;0]' }; 

%Other options
step_demos = 1; %Step the points
use_demos = [1]; %Use only the demos with the appearing here; Use all if empty
doNormalize = 1; %Normalize the demos using the variance in each direction; This works better in general

%Options concerning the transformation
if doNormalize
    optsSearch = {'maxCoef', '10', 'nb_iteration','150', 'regularise', '5e-4', 'conv_crit', '1e-6', 'division_coefList', '[3,3,2.5,2.0,1.5,1.1,1.1]', 'safeCoeffList', '0.6*[1, 1, 1, 1, 1, 1, 1]', 'doPlot', '0'};
else
    optsSearch = {'maxCoef', '5', 'nb_iteration','150', 'regularise', '1e-3', 'conv_crit', '1e-6', 'division_coefList', '[3,3,2.5,2.0,1.5,1.1,1.1]', 'safeCoeffList', '0.55*[1, 1, 1, 1, 1, 1, 1]', 'doPlot', '0'};
end

% Load data 
close all; clc; 
f = 14; % <== Choose dataset from LASADASET
thisFile = allShapes(f).name;
load([dataset_dir, thisFile]);
if isempty(use_demos)
    use_demos = 1:length(demos);
end
fprintf('*** Loaded demonstrations from %s ***\n', allShapes(f).name);
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Step 1: Estimate Diffeomorphic Matching Parameters for Given Demonstrations %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Prepare data
target = 0;
allTarget = [];
allTargetV = [];
allSource = [];
allSourceV = [];
Xinit = [];
[dim, lX] = size(demos{1}.pos);
indD = 1:step_demos:lX;
if indD(end) ~= lX
    indD = [indD, lX];%#k
end

fprintf('- Preparing Data for Diffeomorphic Matching...');
nDemos = 0;
for k = 1:length(use_demos)
    nDemos = nDemos+1;
    demos{use_demos(k)}.pos(:,end);
    Xinit = [Xinit, demos{use_demos(k)}.pos(:,1)];%#ok
    target = target+demos{use_demos(k)}.pos;
    allTarget = [allTarget, demos{use_demos(k)}.pos(:,indD)];%#ok
    thisV = [diff(demos{k}.pos,[],2)./dt, zeros(dim,1)];
    allTargetV = [allTargetV, thisV(:,indD)];%#ok
    thisSource = [linspace(demos{use_demos(k)}.pos(1,1), demos{use_demos(k)}.pos(1,end), lX); linspace(demos{use_demos(k)}.pos(2,1), demos{use_demos(k)}.pos(2,end), lX)];
    thisSourceV = [diff(thisSource./dt, [], 2), zeros(dim,1)];
    allSource = [allSource, thisSource(:,indD)];%#ok
    allSourceV = [allSourceV, thisSourceV(:,indD)];%#ok
end
fprintf('done\n');

% Uses the mean of all demonstrations as target Xi
% (The transformation maps the points given in "source" onto the points in "target"
target = target./nDemos;
targetV = [diff(target,[],2),zeros(dim,1)]./dt;

%Define the source trajectory: A straight line between the initial and final point
source = [linspace(target(1,1), target(1,end), lX); linspace(target(2,1), target(2,end), lX)];
sourceV = [diff(source, [], 2).*(step_demos/dt), zeros(dim,1)];
source = source(:,indD);
sourceV = sourceV(:,indD);

target = target(:,indD);
targetV = targetV(:,indD);

[dim, lX] = size(target);

varTarg = zeros(dim,1);

if doNormalize
    for k = 1:dim
        varTarg(k) = sqrt(var(allTarget(k,:)));
        target(k,:) = target(k,:)./varTarg(k);
        allTarget(k,:) = allTarget(k,:)./varTarg(k);%#ok
        targetV(k,:) = targetV(k,:)./varTarg(k);
        allTargetV(k,:) = allTargetV(k,:)./varTarg(k);%#ok
        source(k,:) = source(k,:)./varTarg(k);
        allSource(k,:) = allSource(k,:)./varTarg(k);%#ok
        sourceV(k,:) = sourceV(k,:)./varTarg(k);
        allSourceV(k,:) = allSourceV(k,:)./varTarg(k);%#ok
        Xinit(k,:) = Xinit(k,:)./varTarg(k);%#ok
    end
end

%Max for plotting
XLimPlot = [min([1.2*allTarget, 0.8*allTarget, -.25*ones(dim,1)],[], 2), max([1.2*allTarget, 0.8*allTarget, .25*ones(dim,1)],[],2)];
XLimPlot2 = [min([1.2*allSource, 0.8*allSource, -.25*ones(dim,1)],[], 2), max([1.2*allSource, 0.8*allSource, .25*ones(dim,1)],[],2)];

%Search for the transformation parameters
fprintf('- Searching for Transformation Parameters...');
tic;
[ centers, targets, coefs, division_coef, nb_iteration ] = iterativeSearch( source, target, optsSearch{:} );
toc;
fprintf('done\n')

% Create all lambda function needed to evaluate the transformation
% Forward transformation (Phi)
diff_fun             = @(pt) result_function(centers, targets, coefs, division_coef, nb_iteration, pt);
% Backward transformation (Phi^-1)
inverse_diff_fun     = @(pt) result_function_reverse(centers, targets, coefs, division_coef, nb_iteration, pt);
% Backward transformation and calculation of the jacobian in point (J^-1)
jac_inverse_diff_fun = @(pt) result_function_reverse_Jac(centers, targets, coefs, division_coef, nb_iteration, pt);

%General plot with the transformed sources and targets
if exist('h_trans','var'); delete(h_trans);end
h_trans = figure('Color',[1 1 1]); hold all;

% Demonstrated Trajectory \xi
scatter(target(1,:),target(2,:), 10, [1 0 0],'filled');

% Virtual Trajectory \chi
scatter(source(1,:),source(2,:), 10, [0 0 1], 'filled'); hold on;

% Demonstrated Trajectory transformed to Virtual through \phi^-1(\xi)
invPhiTarg = inverse_diff_fun(target);%Applying the inverse transformation to the mean target
scatter(invPhiTarg(1,:), invPhiTarg(2,:), 5, [0 0.5 1], '+'); hold on;

% Virtual Trajectory transformed to Demonstration through \\phi(\chi)
PhiSrc = diff_fun(source);
scatter(PhiSrc(1,:), PhiSrc(2,:), 5, [1 0.5 0], '+'); hold on;

% Plotting the deformed grid through the diffeomorphism
plotGrid(1, XLimPlot2, 10, 1000, diff_fun);
    
legend({'Demonstrated Mean trajectory $\Xi=\{\xi_1,\dots,\xi_T\}$', 'Virtual Linear Trajectory $\chi=\{\chi_1,\dots,\chi_T\}$', ...
    'Transformed Demonstrated Trajectory $\Phi^{-1}(\Xi)=\{\phi^{-1}(\xi_1),\dots,\phi^{-1}(\xi_T)\}$',...
    'Transformed Virtual Trajectory $\Phi(\chi)=\{\phi(\chi_1),\dots,\phi(\chi_T)\}$'},'Interpreter','LaTex','FontSize',10)
grid on;
title('Results of Diffeomorphic Matching Algorithm','Interpreter','LaTex', 'FontSize',15)
xlim(XLimPlot(1,:));
ylim(XLimPlot(2,:));
pause(1);
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%       Step 2: Plot Resulting Lyapunov function of transformed space         %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Plot the resulting Lyapunov functions (transformation applied to
%x²+y²==alpha²

lyapunov_fun = @(x)(sum(x.*x));
virtual_fun = @(x)(x);

if exist('h_lyap','var'); delete(h_lyap);end
h_lyap  = figure( 'Color', [1 1 1]);

subplot(1,2,1)
xlim(XLimPlot(1,:));
ylim(XLimPlot(2,:));
my_LyapFun2D({gcf(), gca()}, lyapunov_fun, virtual_fun,[]); hold on;
% Virtual Trajectory \chi
scatter(source(1,:),source(2,:), 10, [0 0 1], 'filled'); hold on;
% Attractor
scatter(0, 0, 30, [0 0 0], '+'); hold on;
title('Initial Lyapunov Function $V(\chi)$','Interpreter','LaTex', 'FontSize',15);

subplot(1,2,2)
xlim(XLimPlot(1,:));
ylim(XLimPlot(2,:));
my_LyapFun2D({gcf(), gca()}, lyapunov_fun, diff_fun,[]); hold on;
% Demonstrated Trajectory \xi
scatter(target(1,:),target(2,:), 10, [1 0 0],'filled'); hold on;
% Attractor
scatter(0, 0, 30, [0 0 0], '+'); hold on;

title('Resulting Lyapunov Function $V(\Phi(\xi))$','Interpreter','LaTex', 'FontSize',15);
pause(1);
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%       Step 3: Plot Resulting Lyapunov function of transformed space         %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Choose initial dynamics
lin_ds_type  = 'converging';
attractor = [0 0]';
switch lin_ds_type 
    case 'converging' % A_c converging Linear DS               
        lambda_1 = 5; lambda_2 = 5;
        A = -diag([lambda_1,lambda_2]);
        ds_type = 1;
    case 'tracking' % A_t tracking Linear DS 
        Y0 = source(1:2,:);
        y1 = 1;
        y2 = -Y0(1)/Y0(2);
        y = [y1;y2];
        Q = [y./norm(y),Y0./norm(Y0)];
        L = [-20 0 ; 0 -1];
        A = Q*L*Q';  
        ds_type = 10;
end


if exist('h_dyn','var'); delete(h_dyn);end
h_dyn  = figure( 'Color', [1 1 1]);
% Plot Original Dynamics
xlim(XLimPlot(1,:));
ylim(XLimPlot(2,:));
ds_lin = @(x) lin_ds([0;0], x, ds_type, []);
hs = plot_ds_model(h_dyn, ds_lin, attractor, [xlim ylim]); hold on;
% Virtual Trajectory \chi
scatter(source(1,:),source(2,:), 10, [0 0 1], 'filled'); hold on;
% Attractor
scatter(0, 0, 30, [0 0 0], '+'); hold on;
title('Original DS $\dot{\xi}=A\xi$', 'Interpreter','LaTex')
pause(1);

%% Plot Deformed Dynamics
if exist('h_dyn_diff','var'); delete(h_dyn_diff);end
h_dyn_diff  = figure( 'Color', [1 1 1]);
xlim(XLimPlot(1,:));
ylim(XLimPlot(2,:));
hSL = my_plotBackwardStreamlines2D( {gcf(), gca()}, source, jac_inverse_diff_fun, [], A ); hold on;
set(hSL,'LineWidth',1)

% THIS IS THE MAIN FUNCTION THAT SIMULATES THE DEFORMED DS
% [phiX, X] = simulateFixedStep_Forward(source, jac_inverse_diff_fun, Xinit, optsSim{:});
% Demonstrated Trajectory \xi
scatter(target(1,1,:),target(2,1,:), 10, [1 0 0],'filled'); hold on;
% Attractor
scatter(0, 0, 30, [0 0 0], '+'); hold on;
title('Deformed DS $\dot{\xi} = A(\phi^{-1}(\xi))J_{\phi}(\phi^{-1}(\xi))\phi^{-1}(\xi) $','Interpreter','LaTex', 'FontSize',15);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
